Let's start by creating the necessary files and directories. We will need the following:

1. `main.py`: This will be the entry point of our application.
2. `requirements.txt`: This will list all the Python dependencies that our application needs.
3. `motor_controller.py`: This will contain the `MotorController` class that will handle the motor control logic.
4. `websocket_server.py`: This will contain the `WebSocketServer` class that will handle the WebSocket server logic.
5. `astro_controller.py`: This will contain the `AstroController` class that will handle the astronomical calculations.
6. `index.html`: This will be the HTML page that the user interacts with.

Let's start with `main.py`:

main.py
```python
from websocket_server import WebSocketServer
from motor_controller import MotorController
from astro_controller import AstroController

def main():
    # Initialize the motor controller
    motor_controller = MotorController()

    # Initialize the astro controller
    astro_controller = AstroController(motor_controller)

    # Point the camera at the moon
    astro_controller.point_at_moon()

    # Initialize the WebSocket server
    websocket_server = WebSocketServer(motor_controller)

    # Start the WebSocket server
    websocket_server.start()

if __name__ == "__main__":
    main()
```

Next, let's create `requirements.txt`:

requirements.txt
```
websockets
astropy
```

Now, let's create `motor_controller.py`:

motor_controller.py
```python
class MotorController:
    def __init__(self):
        pass

    def pan(self, degrees):
        # Placeholder function for panning the camera
        pass

    def tilt(self, degrees):
        # Placeholder function for tilting the camera
        pass
```

Next, let's create `websocket_server.py`:

websocket_server.py
```python
import websockets
import asyncio

class WebSocketServer:
    def __init__(self, motor_controller):
        self.motor_controller = motor_controller

    async def handler(self, websocket, path):
        async for message in websocket:
            # Parse the message and call the appropriate motor controller method
            command, degrees = message.split()
            degrees = int(degrees)

            if command == "pan":
                self.motor_controller.pan(degrees)
            elif command == "tilt":
                self.motor_controller.tilt(degrees)

    def start(self):
        start_server = websockets.serve(self.handler, "localhost", 8765)

        asyncio.get_event_loop().run_until_complete(start_server)
        asyncio.get_event_loop().run_forever()
```

Next, let's create `astro_controller.py`:

astro_controller.py
```python
from astropy.coordinates import get_moon
from astropy.time import Time
from astropy.coordinates import AltAz
from astropy.coordinates import EarthLocation

class AstroController:
    def __init__(self, motor_controller):
        self.motor_controller = motor_controller

    def point_at_moon(self):
        # Get the current time
        now = Time.now()

        # Get the current location of the moon
        moon = get_moon(now)

        # Convert the moon's location to altitude and azimuth
        location = EarthLocation(lat=51.5074*u.deg, lon=0.1278*u.deg, height=0*u.m)
        moon_altaz = moon.transform_to(AltAz(obstime=now,location=location))

        # Point the camera at the moon
        self.motor_controller.pan(moon_altaz.az.deg)
        self.motor_controller.tilt(90 - moon_altaz.alt.deg)
```

Finally, let's create `index.html`:

index.html
```html
<!DOCTYPE html>
<html>
<head>
    <title>Star and Moon Photography</title>
</head>
<body>
    <button onclick="sendCommand('pan', 1)">Pan Right</button>
    <button onclick="sendCommand('pan', -1)">Pan Left</button>
    <button onclick="sendCommand('tilt', 1)">Tilt Up</button>
    <button onclick="sendCommand('tilt', -1)">Tilt Down</button>

    <script>
        var socket = new WebSocket("ws://localhost:8765");

        function sendCommand(command, degrees) {
            socket.send(command + " " + degrees);
        }
    </script>
</body>
</html>
```

This concludes a fully working implementation.